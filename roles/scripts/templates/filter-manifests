#!/bin/bash

# This script will take a pile of Kubernetes resources and sort them into rough categories for more 
# pleasant reading

set -euxo pipefail

category=$1
component=$2

resource_filepath=./manifests/${component}/resources.yaml

# https://mikefarah.gitbook.io/yq/operators/string-operators#test-regex
startfilter='select(.kind | test("'
endfilter='"))'
endfilter_inverse='") | not )'

crds_filter="CustomResourceDefinition"
secrets_filter="Secret"
config_filter="ConfigMap"

data_filter="${secrets_filter}|${config_filter}|Certificate"
workload_filter="Deployment|DaemonSet|StatefulSet|CronJob|Job|Pod"
rbac_filter="ClusterRole|Role|ClusterRoleBinding|RoleBinding|ServiceAccount"
all_filters="${crds_filter}|${data_filter}|${workload_filter}|${rbac_filter}"


case $category in
	crd|crds)
		yq "${startfilter}${crds_filter}${endfilter}" \
		$resource_filepath
	;;
	secret|secrets)
		yq "${startfilter}${secrets_filter}${endfilter}" \
		$resource_filepath
	;;
	config|configs)
		yq "${startfilter}${config_filter}${endfilter}" \
		$resource_filepath
	;;
	data)
		yq "${startfilter}${data_filter}${endfilter}" \
		$resource_filepath
	;;
	workload|workloads)
		yq "${startfilter}${workload_filter}${endfilter}" \
		$resource_filepath
	;;
	rbac)
		yq "${startfilter}${rbac_filter}${endfilter}" \
		$resource_filepath
	;;
	# inverted selections
	non-crd)
		yq "${startfilter}${crds_filter}${endfilter_inverse}" \
		$resource_filepath
	;;
	rest)
		yq "${startfilter}${all_filters}${endfilter_inverse}" \
		$resource_filepath
	;;
	*)
		echo "INFO: Category $category is not defined, assuming API resource"
		# https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html
		# https://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html
		# The caret operator will convert a variable to uppercase based on a provided pattern
		# In this case, since the pattern is omitted, it is treated like a ‘?’, which matches any single character.
		# i.e. the  first character of the variable
		yq "${startfilter}${category^}${endfilter}" \
		$resource_filepath
	;;
esac
